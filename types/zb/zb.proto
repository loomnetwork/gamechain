syntax = "proto3";

option csharp_namespace = "Loom.ZombieBattleground.Protobuf";
import "google/protobuf/any.proto";

message Account {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    bytes owner                = 10;
}

message Deck {
   int64 id = 1;
   string name = 2;
   int64 hero_id = 3;
   repeated CardCollection cards = 4;
}
 
message Card {
    int64 id                    = 1;
    string kind                 = 2;
    string set                  = 3;
    string name                 = 4;
    string description          = 5;
    string flavor_text          = 6;
    string picture              = 7;
    string rank                 = 8;
    string type                 = 9;
    string rarity               = 10;
    string frame                = 11;
    int32 damage                = 12;
    int32 health                = 13;
    int32 cost                  = 14;
    string ability              = 15;
    CardViewInfo card_view_info = 16;
    repeated Effect effects     = 17;
    repeated Ability abilities  = 18;
}

message CardViewInfo {
    Coordinates position   = 1;
    Coordinates scale      = 2;
}

message Coordinates {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Effect {
    string trigger  = 1;
    string effect   = 2;
    string duration = 3;
    string target   = 4;
    string limit    = 5;
}

message Ability {
    string type          = 1;
    string activity_type = 2;
    string call_type     = 3;
    string target_type   = 4;
    string stat_type     = 5;
    string set_type      = 6;
    int32 value          = 7;
    string buff_type     = 8;
    string effect_type   = 9;
    string unit_type     = 10;
    int32 count          = 11;
    string name          = 12;
    int32 turns          = 13;
    int32 delay          = 14;
    string unit_status   = 15;
    string card_type     = 16;
    int32 health         = 17;
    int32 damage         = 18;
    string attack_info   = 19;
}

message CardList {
    repeated Card cards = 1;
}

message CardCollection {
    string card_name  = 1;
    int64 amount      = 2;
}

message CardSet {
    string name         = 1;
    repeated Card cards = 2;
}

message CardLibrary {
    repeated CardSet sets = 1;
}

message Hero {
    int64 hero_id = 1;

    string icon = 2;
    string name = 3;
    string short_description = 4;
    string long_description = 5;
    string element = 6;

    int64 experience = 7;
    int64 level = 8;
    repeated Skill skills = 9;

    int32 primary_skill = 10;
    int32 secondary_skill = 11;
}

message ListHeroesRequest {
    string user_id = 1;
}

message ListHeroesResponse {
    repeated Hero heroes  = 1;
}

message AddHeroExperienceRequest {
    string user_id = 1;
    int64 hero_id = 2;
    int64 experience = 3;
}

message AddHeroExperienceResponse {
    int64 hero_id = 1;
    int64 experience = 2;
}

message GetHeroRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroResponse {
    Hero hero = 1;
}

message GetHeroSkillsRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroSkillsResponse {
    int64 hero_id = 1;
    repeated Skill skills = 2;
}

message Skill {
    enum SkillTargetType {
         NONE = 0;
         PLAYER = 1;
         PLAYER_CARD = 2;
         PLAYER_ALL_CARDS = 3;
         OPPONENT = 4;
         OPPONENT_CARD = 5;
         OPPONENT_ALL_CARDS = 6;
         ALL_CARDS = 7;
    }

    string title = 1;
    string skill = 2;
    string icon_path = 3;
    string description = 4;
    string skill_targets = 5;
    string element_targets = 6;
    int32 value = 7;

    int32 cooldown = 8;
    int32 initial_cooldown = 9;

    int32 attack = 10;
    int32 health = 11;
}

message HeroList {
    repeated Hero heroes = 1;
}

message CardCollectionList {
    repeated CardCollection cards = 1;
}

message DeckList {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 2;
}

// Request and Response

message InitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
}

message UpsertAccountRequest {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
}

message GetAccountRequest {
    string user_id = 1;
}

message GetDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
}

message GetDeckResponse {
    Deck deck = 2;
}

message CreateDeckRequest {
    string user_id = 1;
    Deck deck = 2;
    int64 last_modification_timestamp = 3;
}

message CreateDeckResponse {
    int64 deck_id = 1;
}

message DeleteDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
    int64 last_modification_timestamp = 3;
}

message EditDeckRequest {
    string user_id = 1;
    Deck deck      = 2;
    int64 last_modification_timestamp = 3;
}

message DecksResponse {
    string user_id = 1;
    repeated Deck decks = 2;
}

message ListDecksRequest {
    string user_id = 1;
}

message ListDecksResponse {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 3;
}

message ListCardLibraryRequest {
}

message ListCardLibraryResponse {
    repeated CardSet sets = 1;
}

message ListHeroLibraryRequest {
}

message ListHeroLibraryResponse {
    repeated Hero heroes  = 1;
}

message GetCollectionRequest {
    string user_id = 1;
}

message GetCollectionResponse {
    repeated CardCollection cards = 1;
}


// C# interfaces converted

enum AllowedTarget {
    NoneAllowedTarget = 0;
    Player = 1;
    PlayerCard = 2;
    PlayerAllCards = 3;
    Opponent = 4;
    OpponentCard = 5;
    OpponentAllCards = 6;
    AllCards = 7;
    All = 8;
}

enum AttackRestriction {
    NoneAttackRestriction = 0;
    OnlyNotAttackedByThisUnitInThisTurn = 1;
}        

enum CardAbilityActivityType {
    Passive = 0;
    Active = 1;
}

enum CardAbilityEffect {
    NoneCardAbilityEffect = 0;
    MassiveWaterWave = 1;
    MassiveFire = 2;
    MassiveLightning = 3;
    MassiveToxicAll = 4;
    TargetRock = 5;
    TargetFire = 6;
    TargetLife = 7;
    TargetToxic = 8;
    TargetWater = 9;
    TargetAdjustmentsBomb = 10;
    StunFreezes = 11;
    StunOrDamageFreezes = 12;
    TargetAdjustmentsAir = 13;
    HealDirectly = 14;
    HealCardAbilityEffect = 15;
}

enum CardAbilityTrigger {
    Turn = 0;
    Entry = 1;
    End = 2;
    Attack = 3;
    Death = 4;
    Permanent = 5;
    GotDamage = 6;
    AtDefence = 7;
    InHand = 8;
}

enum CardAbilityType {
    HealCardAbilityType = 0;
    ModificatorStats = 1;
    ChangeStat = 2;
    Stun = 3;
    StunOrDamageAdjustments = 4;
    Spurt = 5;
    AddGooVial = 6;
    AddGooCarrier = 7;
    Dot = 8;
    Summon = 9;
    SpellAttack = 10;
    MassiveDamage = 11;
    DamageTargetAdjustments = 12;
    DamageTarget = 13;
    CardReturn = 14;
    Weapon = 15;
    ChangeStatOfCreaturesByType = 16;
    AttackNumberOfTimesPerTurn = 17;
    DrawCardCardAbilityType = 18;
    DevourZombiesAndCombineStats = 19;
    DestroyUnitByType = 20;
    LowerCostOfCardInHand = 21;
    OverflowGoo = 22;
    LoseGoo = 23;
    DisableNextTurnGoo = 24;
    Rage = 25;
    FreezeUnits = 26;
    TakeDamageRandomEnemy = 27;
    TakeControlEnemyUnit = 28;
    Guard = 29;
    DestroyFrozenUnit = 30;
    UseAllGooToIncreaseStats = 31;
    FirstUnitInPlay = 32;
    AllyUnitsOfTypeInPlayGetStats = 33;
    DamageEnemyUnitsAndFreezeThem = 34;
    ReturnUnitsOnBoardToOwnersDecks = 35;
    TakeUnitTypeToAdjacentAllyUnits = 36;
    EnemyThatAttacksBecomeFrozen = 37;
    TakeUnitTypeToAllyUnit = 38;
    ReviveDiedUnitsOfTypeFromMatch = 39;
    ChangeStatUntillEndOfTurn = 40;
    AttackOverlord = 41;
    AdjacentUnitsGetHeavy = 42;
    FreezeNumberOfRandomAlly = 43;
    AddCardByNameToHand = 44;
    DealDamageToThisAndAdjacentUnits = 45;
    Swing = 46;
    TakeDefenceIfOverlordHasLessDefenceThan = 47;
    GainNumberOfLifeForEachDamageThisDeals = 48;
    AdditionalDamageToHeavyInAttack  = 49;
    UnitWeapon = 50;
    TakeDamageAtEndOfTurnToThis = 51;
    DelayedLoseHeavyGainAttack =  52;
    DelayedGainAttack = 53;
    ReanimateUnit = 54;
    PriorityAttack = 55;
    DestroyTargetUnitAfterAttack = 56;
    CostsLessIfCardTypeInHand = 57;
    ReturnUnitsOnBoardToOwnersHands = 58;
}

enum CardType {
    Creature = 0;
    Spell = 1;
}

enum CreatureRank {
    Minion = 0;
    Officer = 1;
    Commander = 2;
    General = 3;
}

enum CreatureType {
    Normal = 0;
    Walker = 1;
    Feral = 2;
    Heavy = 3;
}

enum ElementKind {
    Fire = 0;
    Water = 1;
    Earth = 2;
    Air = 3;
    Life = 4;
    Toxic = 5;
    Item = 6;
    Others = 7;
    NoneElementKind = 8;
}

message GameState {
    repeated PlayerState PlayerStates = 1;
}

message AbilityInstance {

}

message Action {
    PlayerActionType ActionType = 1;
    google.protobuf.Any ActionData = 2;
}

message CardAbility {
    CardAbilityType AbilityType = 1;
    CardAbilityActivityType AbilityActivityType = 2;
    CardAbilityTrigger CardAbilityTrigger = 3;
    repeated AllowedTarget AllowedTargets = 4;
    StatType AbilityStatType = 5;
    ElementKind AbilitySetType = 6;
    CardAbilityEffect CardAbilityEffect = 7;
    AttackRestriction AttackRestriction = 8;
    CardType TargetCardType = 9;
    UnitSpecialStatus TargetUnitSpecialStatusType = 10;
    CardType TargetUnitType = 11;
    int32 Value = 12;
    int32 Damage = 13;
    int32 Health = 14;
    string AttackInfo = 15;
    string Name = 16;
    int32 Turns = 17;
    int32 Count = 18;
    int32 Delay = 19;
}

message CardInstance {
    int32 InstanceId = 1;
    CardPrototype Prototype = 2;
    int32 Defence = 3;
    int32 Attack = 4;
}

message CardPrototype {
    int32 DataId = 1;
    ElementKind CardSetType = 2;
    string Name = 3;
    int32 GooCost = 4;
    string Description = 5;
    string FlavorText = 6;
    string Picture = 7;
    string Frame = 8;
    int32 InitialDamage = 9;
    int32 InitialDefence = 10;
    string Rank = 11;
    string Type = 12;
    repeated CardAbility Abilities = 13;
    CardViewInfo CardViewInfo = 14;
    CreatureRank CreatureRank = 15;
    CreatureType CreatureType = 16;
    CardType CardType = 17;
}

message DataIdOwner {
    int32 DataId = 1;
}

// (interface IDeck)
message CardDeck {
    repeated CardPrototype Cards = 1;
}

message InstanceIdOwner {
    int32 InstanceId = 1;
}

message OverlordInstance {
    int32 InstanceId = 1;
    OverlordPrototype Prototype = 2;
    OverlordSkillInstance FirstSkill = 3;
    OverlordSkillInstance SecondSkill = 4;
    int32 Defence = 5;
    int32 Goo = 6;
    int32 MaxGoo = 7;
}

message OverlordPrototype {
    int32 HeroId = 1;
    string Icon = 2;
    string Name = 3;    
    string ShortDescription = 4;
    string LongDescription = 5;
    int32 Experience = 6;
    int32 Level = 7;
    ElementKind Element = 8;
    repeated OverlordSkillPrototype Skills = 9;
}

message OverlordSkillInstance {
    OverlordSkillPrototype Prototype = 1;
    int32 Cooldown = 2;
}

message OverlordSkillPrototype {
    string Title = 1;
    string Skill = 2;
    string IconPath = 3;
    string Description = 4;
    int32 Cooldown = 5;
    int32 InitialCooldown = 6;
    int32 Parameter = 7;
    int32 Attack = 8;
    OverlordSkillKind OverlordSkillKind = 9;
    repeated AllowedTarget SkillTargetTypes = 10;
    repeated ElementKind ElementTargetTypes = 11;
}

message PlayerAction {
    int32 PlayerId = 1;
}

message PlayerActionCardAttack {
    int32 PlayerId = 1;
    CardInstance Attacker = 2;
    CardInstance Target = 3;
}

message PlayerActionDrawCard {
    int32 PlayerId = 1;
    CardInstance CardInstance = 2;
}

message PlayerActionEndTurn  {
    int32 PlayerId = 1;
}

message PlayerActionMulligan {
    int32 PlayerId = 1;
    repeated CardInstance MulliganedCards = 2;
}

message PlayerActionOutcome {
    int32 PlayerId = 1;
    GameState GameState = 2;
}

message PlayerActionUseCardAbility {
    int32 PlayerId = 1;
    CardInstance Card = 2;
    Unit Target = 3;
}

message PlayerActionUseOverlordSkill {
    int32 PlayerId = 1;
}

message PlayerState {
    OverlordInstance OverlordInstance = 1;
    repeated CardInstance CardsInHand = 2;
    repeated CardInstance CardsOnBoard = 3;
    CardDeck Deck = 4;
}

message StartGameAction {
    repeated PlayerState PlayerStates = 1;
}

message Unit {
    int32 InstanceId = 1;
}

enum OverlordSkillKind {
        NoneOverlordSkillKind = 0;

        // AIR
        Push = 1;
        Draw = 2;
        WindShield = 3;
        WindWall = 4;
        Retreat = 5;

        // EARTH
        Harden = 6;
        StoneSkin = 7;
        Fortify = 8;
        Phalanx = 9;
        Fortress = 10;

        // FIRE
        FireBolt = 11;
        Rabies = 12;
        Fireball = 13;
        MassRabies = 14;
        MeteorShower = 15;

        // LIFE
        HealingTouch = 16;
        Mend = 17;
        Ressurect = 18;
        Enhance = 19;
        Reanimate = 20;

        // TOXIC
        PoisonDart = 21;
        ToxicPower = 22;
        Breakout = 23;
        Infect = 24;
        Epidemic = 25;

        // WATER
        Freeze = 26;
        IceBolt = 27;
        IceWall = 28;
        Shatter = 29;
        Blizzard = 30;
}

enum OverlordSkillSelectionType {
        Primary = 0;
        Secondary = 1;
}

enum PlayerActionType {
        EndTurn = 0;
        Mulligan = 1;
        DrawCardPlayerActionType = 2;
        CardAttack = 3;
        UseCardAbility = 4;
        UseOverlordSkill = 5;
}

enum StatType {
        NoneStatType = 0;
        Health = 1;
        Damage = 2;
}

enum UnitSpecialStatus {
        NoneUnitSpecialStatus = 0;
        Frozen = 1;
}