syntax = "proto3";

option csharp_namespace = "Loom.ZombieBattleground.Protobuf";

import "github.com/loomnetwork/go-loom/types/types.proto";
// C# namespace needs to be added to types.proto?
//import "github.com/loomnetwork/unity-sdk/UnityProject/Assets/LoomSDK/Source/Protobuf/proto/loom.proto";

message Account {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    bytes owner                = 10;
}

message Deck {
   int64 id = 1;
   string name = 2;
   int64 hero_id = 3;
   repeated CardCollection cards = 4;
}

message Card {
    int64 id                    = 1;
    string kind                 = 2;
    string set                  = 3;
    string name                 = 4;
    string description          = 5;
    string flavor_text          = 6;
    string picture              = 7;
    string rank                 = 8;
    string type                 = 9;
    string rarity               = 10;
    string frame                = 11;
    int32 damage                = 12;
    int32 health                = 13;
    int32 cost                  = 14;
    string ability              = 15;
    CardViewInfo card_view_info = 16;
    repeated Effect effects     = 17;
    repeated Ability abilities  = 18;
}

message CardViewInfo {
    Coordinates position   = 1;
    Coordinates scale      = 2;
}

message Coordinates {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Vector2Int {
    int32 x = 1;
    int32 y = 2;
}

message Rect {
    Vector2Int position = 1;
    Vector2Int size = 2;
}

message Effect {
    string trigger  = 1;
    string effect   = 2;
    string duration = 3;
    string target   = 4;
    string limit    = 5;
}

message Ability {
    string type          = 1;
    string activity_type = 2;
    string call_type     = 3;
    string target_type   = 4;
    string stat_type     = 5;
    string set_type      = 6;
    int32 value          = 7;
    string buff_type     = 8;
    string effect_type   = 9;
    string unit_type     = 10;
    int32 count          = 11;
    string name          = 12;
    int32 turns          = 13;
    int32 delay          = 14;
    string unit_status   = 15;
    string card_type     = 16;
    int32 health         = 17;
    int32 damage         = 18;
    string attack_info   = 19;
}

message CardList {
    repeated Card cards = 1;
}

message CardCollection {
    string card_name  = 1;
    int64 amount      = 2;
}

message CardSet {
    string name         = 1;
    repeated Card cards = 2;
}

message CardLibrary {
    repeated CardSet sets = 1;
}

message Hero {
    int64 hero_id = 1;

    string icon = 2;
    string name = 3;
    string short_description = 4;
    string long_description = 5;
    string element = 6;

    int64 experience = 7;
    int64 level = 8;
    repeated Skill skills = 9;

    int32 primary_skill = 10;
    int32 secondary_skill = 11;
}

message ListHeroesRequest {
    string user_id = 1;
}

message ListHeroesResponse {
    repeated Hero heroes  = 1;
}

message AddHeroExperienceRequest {
    string user_id = 1;
    int64 hero_id = 2;
    int64 experience = 3;
}

message AddHeroExperienceResponse {
    int64 hero_id = 1;
    int64 experience = 2;
}

message GetHeroRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroResponse {
    Hero hero = 1;
}

message GetHeroSkillsRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroSkillsResponse {
    int64 hero_id = 1;
    repeated Skill skills = 2;
}

message Skill {
    enum SkillTargetType {
         NONE = 0;
         PLAYER = 1;
         PLAYER_CARD = 2;
         PLAYER_ALL_CARDS = 3;
         OPPONENT = 4;
         OPPONENT_CARD = 5;
         OPPONENT_ALL_CARDS = 6;
         ALL_CARDS = 7;
    }

    string title = 1;
    string skill = 2;
    string icon_path = 3;
    string description = 4;
    string skill_targets = 5;
    string element_targets = 6;
    int32 value = 7;

    int32 cooldown = 8;
    int32 initial_cooldown = 9;

    int32 attack = 10;
    int32 health = 11;
}

message HeroList {
    repeated Hero heroes = 1;
}

message CardCollectionList {
    repeated CardCollection cards = 1;
}

message DeckList {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 2;
}

// Request and Response

message InitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
    string version                             = 5;
    Address oracle                             = 6;
}

message UpdateOracle {
    Address new_oracle = 1;
    Address old_oracle = 2;
}

message UpdateInitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
    string version                             = 5;
    Address oracle                             = 6;
}

message UpdateCardListRequest {
    repeated Card cards = 1;
    string version = 2;
}

message GetCardListRequest {
    string version = 1;
}

message GetCardListResponse {
    repeated Card cards = 1;
}

message UpsertAccountRequest {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    string version = 10;
}

message GetAccountRequest {
    string user_id = 1;
}

message GetDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
}

message GetDeckResponse {
    Deck deck = 2;
}

message CreateDeckRequest {
    string user_id = 1;
    Deck deck = 2;
    int64 last_modification_timestamp = 3;
    string version = 4;
}

message CreateDeckResponse {
    int64 deck_id = 1;
}

message DeleteDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
    int64 last_modification_timestamp = 3;
}

message EditDeckRequest {
    string user_id = 1;
    Deck deck      = 2;
    int64 last_modification_timestamp = 3;
    string version = 4;
}

message DecksResponse {
    string user_id = 1;
    repeated Deck decks = 2;
}

message ListDecksRequest {
    string user_id = 1;
}

message ListDecksResponse {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 3;
}

message ListCardLibraryRequest {
    string version = 1;
}

message ListCardLibraryResponse {
    repeated CardSet sets = 1;
}

message ListHeroLibraryRequest {
    string version = 1;
}

message ListHeroLibraryResponse {
    repeated Hero heroes  = 1;
}

message UpdateHeroLibraryRequest {
    string version = 1;
    repeated Hero heroes  = 2;
}

message UpdateHeroLibraryResponse {
}

message GetCollectionRequest {
    string user_id = 1;
}

message GetCollectionResponse {
    repeated CardCollection cards = 1;
}


//////////// Match Making /////////////

message PlayerState {
    string id = 1;
    PlayerActionType currentAction = 2;
    OverlordInstance overlordInstance = 3;
    repeated CardInstance cardsInHand = 4;
    repeated CardInstance cardsOnBoard = 5;
    repeated CardInstance cardsInDeck = 6;
    Deck deck  = 7;
    int32 hp   = 8;
    int32 mana = 9;
}

message Match {
    int64 id = 1;
    repeated string topics = 2;
    repeated PlayerState playerStates = 3;
    enum Status {
        Created      = 0;
        Matching     = 1;
        Started      = 2;
        Playing      = 3;
        PlayerLeft   = 4;
        Ended        = 5;
    }
    Status status = 4;
    string version = 5;
}

message MatchMakingInfoList {
    repeated MatchMakingInfo infos = 1;
}

message MatchMakingInfo {
    string userId = 1;
    Deck deck = 2;
}

enum PlayerActionType {
    NoneAction        = 0;
    EndTurn           = 1;
    Mulligan          = 2;
    DrawCard          = 3;
    CardPlay          = 4;
    CardAttack        = 5;
    CardAbilityUsed   = 6;
    OverlordSkillUsed = 7;
    CoinToss          = 8;
    InitHands         = 9;
    LeaveMatch        = 10;
    RankBuff          = 11;
}

message PlayerAction {
    PlayerActionType actionType = 1; // not sure we really need this
    string playerId = 2;
    oneof action {
        PlayerActionCardAttack cardAttack               = 3;
        PlayerActionDrawCard drawCard                   = 4;
        PlayerActionEndTurn endTurn                     = 5;
        PlayerActionMulligan mulligan                   = 6;
        PlayerActionCardPlay cardPlay                   = 7;
        PlayerActionCardAbilityUsed cardAbilityUsed     = 8;
        PlayerActionOverlordSkillUsed overlordSkillUsed = 9;
        PlayerActionCoinToss coinToss                   = 10;
        PlayerActionInitHands initHands                 = 11;
        PlayerActionLeaveMatch leaveMatch               = 12;
        PlayerActionRankBuff rankBuff                   = 13;
    };
}

message PlayerActionEvent {
    PlayerActionType playerActionType = 1;
    string userId  = 2;
    string message = 3;
    Match match    = 4;
    PlayerAction playerAction = 5;
    GameState gameState = 6;
}

message GameReplay {
    repeated PlayerActionEvent events = 1;
    string replayVersion = 2;
    int64 randomSeed = 3;
}

message PlayersInMatchmakingList {
    repeated string userIDs = 1;
}

message PendingMatchList {
    repeated Match matches = 1;
}

message MatchList {
    repeated Match matches = 1;
}

message MatchCount {
    int64 currentId = 1;
}

message FindMatchRequest {
    string userId = 1;
    int64 deckId  = 2;
    string version = 3;
    int64 randomSeed = 4;
    Address customGame = 5;
}

message FindMatchResponse {
    Match match = 1;
}

message GetMatchRequest {
    int64 matchId = 1;
}

message GetMatchResponse {
    Match match         = 1;
    GameState gameState = 2;
}

message SetMatchRequest {
    Match match         = 1;
}


message GetGameStateRequest {
    int64 matchId = 1;
}

message GetGameStateResponse {
    GameState gameState = 1;
}

message SetGameStateRequest {
    GameState gameState = 1;
}

message PlayerActionRequest {
    int64 matchId = 1;
    PlayerAction playerAction = 2;
}

message PlayerActionResponse {
    GameState gameState = 1;
    Match match = 2;
}

message EndMatchRequest {
    int64 matchId   = 1;
    string userId   = 2;
    string winnerId = 3;
}

message EndMatchResponse {
    GameState gameState = 1;
}

// Game Modes

message GameMode {
    string ID = 1;
    string name = 2;
    string description = 3;
    string version = 4;
    GameModeType game_mode_type = 5;
    Address address = 6;
    Address Owner = 7;
}

message GameModeList {
    repeated GameMode game_modes = 1;
}

enum GameModeType {
    Community = 0;
    Loom = 1;
}

message GameModeRequest {
    string name = 1;
    string description = 2;
    string version = 3;
    string address = 4;
    GameModeType game_mode_type = 5;
    string oracle = 6;
}

message UpdateGameModeRequest {
    string ID = 1;
    string name = 2;
    string description = 3;
    string version = 4;
    string address = 5;
    GameModeType game_mode_type = 6;
    string oracle = 7;
}

message DeleteGameModeRequest {
    string ID = 1;
    string oracle = 2;
}

message GetGameModeRequest {
    string ID = 1;
}

message ListGameModesRequest {
}

message GetCustomGameModeCustomUiRequest {
     Address address = 1;
}

message GetCustomGameModeCustomUiResponse {
    repeated CustomGameModeCustomUiElement uiElements = 1;
}

message CallCustomGameModeFunctionRequest {
    Address address = 1;
    string functionName = 2;
}

message StaticCallCustomGameModeFunctionResponse {
    bytes output = 1;
}

message CustomGameModeCustomUiLabel {
    string text = 1;
}

message CustomGameModeCustomUiButton {
    string title = 1;
    string onClickFunctionName = 2;
}

message CustomGameModeCustomUiElement {
    Rect rect = 1;
    oneof uiElement {
        CustomGameModeCustomUiLabel label = 2;
        CustomGameModeCustomUiButton button = 3;
    }
}

//////////////// GAME PLAY //////////////////

message GlobalState {
    int64 current_game_id = 1;
}

// C# interfaces converted

enum AllowedTarget {
    NoneAllowedTarget = 0;
    Player = 1;
    PlayerCard = 2;
    PlayerAllCards = 3;
    Opponent = 4;
    OpponentCard = 5;
    OpponentAllCards = 6;
    AllCards = 7;
    All = 8;
}

enum AttackRestriction {
    NoneAttackRestriction = 0;
    OnlyNotAttackedByThisUnitInThisTurn = 1;
}

enum CardAbilityActivityType {
    Passive = 0;
    Active = 1;
}

enum CardAbilityEffect {
    NoneCardAbilityEffect = 0;
    MassiveWaterWave = 1;
    MassiveFire = 2;
    MassiveLightning = 3;
    MassiveToxicAll = 4;
    TargetRock = 5;
    TargetFire = 6;
    TargetLife = 7;
    TargetToxic = 8;
    TargetWater = 9;
    TargetAdjustmentsBomb = 10;
    StunFreezes = 11;
    StunOrDamageFreezes = 12;
    TargetAdjustmentsAir = 13;
    HealDirectly = 14;
    HealCardAbilityEffect = 15;
}

enum CardAbilityTrigger {
    Turn = 0;
    Entry = 1;
    End = 2;
    Attack = 3;
    Death = 4;
    Permanent = 5;
    GotDamage = 6;
    AtDefence = 7;
    InHand = 8;
}

enum CardAbilityType {
    HealCardAbilityType = 0;
    ModificatorStats = 1;
    ChangeStat = 2;
    Stun = 3;
    StunOrDamageAdjustments = 4;
    Spurt = 5;
    AddGooVial = 6;
    AddGooCarrier = 7;
    Dot = 8;
    Summon = 9;
    SpellAttack = 10;
    MassiveDamage = 11;
    DamageTargetAdjustments = 12;
    DamageTarget = 13;
    CardReturn = 14;
    Weapon = 15;
    ChangeStatOfCreaturesByType = 16;
    AttackNumberOfTimesPerTurn = 17;
    DrawCardCardAbilityType = 18;
    DevourZombiesAndCombineStats = 19;
    DestroyUnitByType = 20;
    LowerCostOfCardInHand = 21;
    OverflowGoo = 22;
    LoseGoo = 23;
    DisableNextTurnGoo = 24;
    Rage = 25;
    FreezeUnits = 26;
    TakeDamageRandomEnemy = 27;
    TakeControlEnemyUnit = 28;
    Guard = 29;
    DestroyFrozenUnit = 30;
    UseAllGooToIncreaseStats = 31;
    FirstUnitInPlay = 32;
    AllyUnitsOfTypeInPlayGetStats = 33;
    DamageEnemyUnitsAndFreezeThem = 34;
    ReturnUnitsOnBoardToOwnersDecks = 35;
    TakeUnitTypeToAdjacentAllyUnits = 36;
    EnemyThatAttacksBecomeFrozen = 37;
    TakeUnitTypeToAllyUnit = 38;
    ReviveDiedUnitsOfTypeFromMatch = 39;
    ChangeStatUntillEndOfTurn = 40;
    AttackOverlord = 41;
    AdjacentUnitsGetHeavy = 42;
    FreezeNumberOfRandomAlly = 43;
    AddCardByNameToHand = 44;
    DealDamageToThisAndAdjacentUnits = 45;
    Swing = 46;
    TakeDefenceIfOverlordHasLessDefenceThan = 47;
    GainNumberOfLifeForEachDamageThisDeals = 48;
    AdditionalDamageToHeavyInAttack  = 49;
    UnitWeapon = 50;
    TakeDamageAtEndOfTurnToThis = 51;
    DelayedLoseHeavyGainAttack =  52;
    DelayedGainAttack = 53;
    ReanimateUnit = 54;
    PriorityAttack = 55;
    DestroyTargetUnitAfterAttack = 56;
    CostsLessIfCardTypeInHand = 57;
    ReturnUnitsOnBoardToOwnersHands = 58;
}

enum CardKind {
    SPELL    = 0;
    CREATURE = 1;
}

enum AffectObjectType {
    PLAYER    = 0;
    CHARACTER = 1;
    CARD      = 2;
}

enum CreatureRank {
    Minion = 0;
    Officer = 1;
    Commander = 2;
    General = 3;
}

enum CreatureType {
    Walker = 0;
    Feral = 1;
    Heavy = 2;
    None = 3;
}

enum ElementKind {
    Fire = 0;
    Water = 1;
    Earth = 2;
    Air = 3;
    Life = 4;
    Toxic = 5;
    Item = 6;
    Others = 7;
    NoneElementKind = 8;
}

message GameState {
    int64 id                            = 1;
    bool isEnded                        = 2;
    int32 currentPlayerIndex            = 3;
    repeated PlayerState playerStates   = 4;
    int64 currentActionIndex            = 5;
    repeated PlayerAction playerActions = 6;
    int64 randomseed                    = 7;
    string winner                       = 8;
}

message AbilityInstance {

}


message CardAbility {
    CardAbilityType abilityType = 1;
    CardAbilityActivityType abilityActivityType = 2;
    CardAbilityTrigger cardAbilityTrigger = 3;
    repeated AllowedTarget allowedTargets = 4;
    StatType abilityStatType = 5;
    ElementKind abilitySetType = 6;
    CardAbilityEffect cardAbilityEffect = 7;
    AttackRestriction attackRestriction = 8;
    CardKind targetCardType = 9;
    UnitSpecialStatus targetUnitSpecialStatusType = 10;
    CardKind targetUnitType = 11;
    int32 value = 12;
    int32 damage = 13;
    int32 health = 14;
    string attackInfo = 15;
    string name = 16;
    int32 turns = 17;
    int32 count = 18;
    int32 delay = 19;
}

message CardInstance {
    int32 instanceId = 1;
    CardPrototype prototype = 2;
    int32 defence = 3;
    int32 attack = 4;
}

message CardPrototype {
    int32 dataId = 1;
    ElementKind cardSetType = 2;
    string name = 3;
    int32 gooCost = 4;
    string description = 5;
    string flavorText = 6;
    string picture = 7;
    string frame = 8;
    int32 initialDamage = 9;
    int32 initialDefence = 10;
    string rank = 11;
    string type = 12;
    repeated CardAbility abilities = 13;
    CardViewInfo cardViewInfo = 14;
    CreatureRank creatureRank = 15;
    CreatureType creatureType = 16;
    CardKind cardKind = 17;
    string kind = 18;
}

message DataIdOwner {
    int32 dataId = 1;
}

// (interface IDeck)
message CardDeck {
    repeated CardPrototype cards = 1;
}

message InstanceIdOwner {
    int32 instanceId = 1;
}

message OverlordInstance {
    int32 instanceId = 1;
    OverlordPrototype prototype = 2;
    OverlordSkillInstance firstSkill = 3;
    OverlordSkillInstance secondSkill = 4;
    int32 defence = 5;
    int32 goo = 6;
    int32 maxGoo = 7;
}

message OverlordPrototype {
    int32 heroId = 1;
    string icon = 2;
    string name = 3;
    string shortDescription = 4;
    string longDescription = 5;
    int32 experience = 6;
    int32 level = 7;
    ElementKind element = 8;
    repeated OverlordSkillPrototype skills = 9;
}

message OverlordSkillInstance {
    OverlordSkillPrototype prototype = 1;
    int32 cooldown = 2;
}

message OverlordSkillPrototype {
    string title = 1;
    string skill = 2;
    string iconPath = 3;
    string description = 4;
    int32 cooldown = 5;
    int32 initialCooldown = 6;
    int32 parameter = 7;
    int32 attack = 8;
    OverlordSkillKind overlordSkillKind = 9;
    repeated AllowedTarget skillTargetTypes = 10;
    repeated ElementKind elementTargetTypes = 11;
}

message PlayerActionCoinToss {
}

message PlayerActionInitHands {
}

message PlayerActionLeaveMatch {
}

message PlayerActionCardPlay {
    CardInstance card = 1;
    int32 position = 2;
}

message PlayerActionRankBuff {
    CardInstance card = 1;
    repeated Unit targets = 2;
}

message PlayerActionCardAttack {
    CardInstance attacker = 1;
    AffectObjectType affectObjectType = 2;
    Unit target = 3;
}

message PlayerActionCardAbilityUsed {
    CardInstance card = 1;
    CardKind cardKind = 2;
    repeated Unit targets = 3;
    string AbilityType = 4;
}

message PlayerActionOverlordSkillUsed {
    int64 SkillId = 1;
    AffectObjectType affectObjectType = 2;
    Unit target = 3;
}

message PlayerActionDrawCard {
    CardInstance cardInstance = 2;
}

message PlayerActionEndTurn  {
}

message PlayerActionMulligan {
    repeated CardInstance mulliganedCards = 1;
}

message PlayerActionOutcome {
    string playerId = 1;
    GameState gameState = 2;
}

message StartGameAction {
    repeated PlayerState playerStates = 1;
}

message Unit {
    int32 instanceId = 1;
    AffectObjectType affectObjectType = 2;
}

enum OverlordSkillKind {
    NoneOverlordSkillKind = 0;

    // AIR
    Push = 1;
    Draw = 2;
    WindShield = 3;
    WindWall = 4;
    Retreat = 5;

    // EARTH
    Harden = 6;
    StoneSkin = 7;
    Fortify = 8;
    Phalanx = 9;
    Fortress = 10;

    // FIRE
    FireBolt = 11;
    Rabies = 12;
    Fireball = 13;
    MassRabies = 14;
    MeteorShower = 15;

    // LIFE
    HealingTouch = 16;
    Mend = 17;
    Ressurect = 18;
    Enhance = 19;
    Reanimate = 20;

    // TOXIC
    PoisonDart = 21;
    ToxicPower = 22;
    Breakout = 23;
    Infect = 24;
    Epidemic = 25;

    // WATER
    Freeze = 26;
    IceBolt = 27;
    IceWall = 28;
    Shatter = 29;
    Blizzard = 30;
}

enum OverlordSkillSelectionType {
    Primary = 0;
    Secondary = 1;
}

enum StatType {
    NoneStatType = 0;
    Health = 1;
    Damage = 2;
}

enum UnitSpecialStatus {
    NoneUnitSpecialStatus = 0;
    Frozen = 1;
}
