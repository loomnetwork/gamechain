syntax = "proto3";

option csharp_namespace = "Loom.ZombieBattleground.Protobuf";

message Account {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    bytes owner                = 10;
}

message Deck {
   int64 id = 1;
   string name = 2;
   int64 hero_id = 3;
   repeated CardCollection cards = 4;
}

message Card {
    int64 id                    = 1;
    string kind                 = 2;
    string set                  = 3;
    string name                 = 4;
    string description          = 5;
    string flavor_text          = 6;
    string picture              = 7;
    string rank                 = 8;
    string type                 = 9;
    string rarity               = 10;
    string frame                = 11;
    int32 damage                = 12;
    int32 health                = 13;
    int32 cost                  = 14;
    string ability              = 15;
    CardViewInfo card_view_info = 16;
    repeated Effect effects     = 17;
    repeated Ability abilities  = 18;
}

message CardViewInfo {
    Coordinates position   = 1;
    Coordinates scale      = 2;
}

message Coordinates {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Effect {
    string trigger  = 1;
    string effect   = 2;
    string duration = 3;
    string target   = 4;
    string limit    = 5;
}

message Ability {
    string type          = 1;
    string activity_type = 2;
    string call_type     = 3;
    string target_type   = 4;
    string stat_type     = 5;
    string set_type      = 6;
    int32 value          = 7;
    string buff_type     = 8;
    string effect_type   = 9;
    string unit_type     = 10;
    int32 count          = 11;
    string name          = 12;
    int32 turns          = 13;
    int32 delay          = 14;
    string unit_status   = 15;
    string card_type     = 16;
    int32 health         = 17;
    int32 damage         = 18;
    string attack_info   = 19;
}

message CardList {
    repeated Card cards = 1;
}

message CardCollection {
    string card_name  = 1;
    int64 amount      = 2;
}

message CardSet {
    string name         = 1;
    repeated Card cards = 2;
}

message CardLibrary {
    repeated CardSet sets = 1;
}

message Hero {
    int64 hero_id = 1;

    string icon = 2;
    string name = 3;
    string short_description = 4;
    string long_description = 5;
    string element = 6;

    int64 experience = 7;
    int64 level = 8;
    repeated Skill skills = 9;

    int32 primary_skill = 10;
    int32 secondary_skill = 11;
}

message ListHeroesRequest {
    string user_id = 1;
}

message ListHeroesResponse {
    repeated Hero heroes  = 1;
}

message AddHeroExperienceRequest {
    string user_id = 1;
    int64 hero_id = 2;
    int64 experience = 3;
}

message AddHeroExperienceResponse {
    int64 hero_id = 1;
    int64 experience = 2;
}

message GetHeroRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroResponse {
    Hero hero = 1;
}

message GetHeroSkillsRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroSkillsResponse {
    int64 hero_id = 1;
    repeated Skill skills = 2;
}

message Skill {
    enum SkillTargetType {
         NONE = 0;
         PLAYER = 1;
         PLAYER_CARD = 2;
         PLAYER_ALL_CARDS = 3;
         OPPONENT = 4;
         OPPONENT_CARD = 5;
         OPPONENT_ALL_CARDS = 6;
         ALL_CARDS = 7;
    }

    string title = 1;
    string skill = 2;
    string icon_path = 3;
    string description = 4;
    string skill_targets = 5;
    string element_targets = 6;
    int32 value = 7;

    int32 cooldown = 8;
    int32 initial_cooldown = 9;

    int32 attack = 10;
    int32 health = 11;
}

message HeroList {
    repeated Hero heroes = 1;
}

message CardCollectionList {
    repeated CardCollection cards = 1;
}

message DeckList {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 2;
}

// Request and Response

message InitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
}

message UpsertAccountRequest {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
}

message GetAccountRequest {
    string user_id = 1;
}

message GetDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
}

message GetDeckResponse {
    Deck deck = 2;
}

message CreateDeckRequest {
    string user_id = 1;
    Deck deck = 2;
    int64 last_modification_timestamp = 3;
}

message CreateDeckResponse {
    int64 deck_id = 1;
}

message DeleteDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
    int64 last_modification_timestamp = 3;
}

message EditDeckRequest {
    string user_id = 1;
    Deck deck      = 2;
    int64 last_modification_timestamp = 3;
}

message DecksResponse {
    string user_id = 1;
    repeated Deck decks = 2;
}

message ListDecksRequest {
    string user_id = 1;
}

message ListDecksResponse {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 3;
}

message ListCardLibraryRequest {
}

message ListCardLibraryResponse {
    repeated CardSet sets = 1;
}

message ListHeroLibraryRequest {
}

message ListHeroLibraryResponse {
    repeated Hero heroes  = 1;
}

message GetCollectionRequest {
    string user_id = 1;
}

message GetCollectionResponse {
    repeated CardCollection cards = 1;
}


//////////// Match Making /////////////

message PlayerState {
    string id = 1;
    enum Status {
        Waiting = 0;
        Ready   = 1;
        Playing = 2
        Offline = 3;
    }
    Status status = 2;
}

message Match {
    int64 id = 1;
    repeated string topics = 2;
    repeated PlayerState playerStates = 3;
    enum Status {
        Waiting = 0;
        Ready = 1;
        Locked = 2;
        Ended = 3;
    }
    Status status = 4;
}

// Event
message EventMatch {
    Match match = 1;
}

message MatchList {
    repeated Match matches = 1;
}

message FindMatchRequest {
    string userId = 1;
}

message FindMatchResponse {
    Match match = 2;
}

message StartMatchRequest {
    string userId = 1;
}

message ActionRequest {
    string userId = 1;
    int64 matchId = 2;
    string message = 3;
}

message ActionEvent {
    string userId = 1;
    int64 matchId = 2;
    string message = 3;
}