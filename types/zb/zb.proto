syntax = "proto3";

option csharp_namespace = "Loom.ZombieBattleground.Protobuf";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "github.com/loomnetwork/go-loom/types/types.proto";

message Account {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    bytes owner                = 10;
}

message Deck {
   int64 id = 1;
   string name = 2;
   int64 hero_id = 3;
   repeated CardCollection cards = 4;
}

message Card {
    int64 mouldId               = 1;
    CardKind kind               = 2;
    CardSetType set             = 3;
    string name                 = 4;
    string description          = 5;
    string flavor_text          = 6;
    string picture              = 7;
    CreatureRank rank                 = 8;
    CreatureType type                 = 9;
    string frame                = 11;
    int32 attack                = 12;
    int32 defense               = 13;
    int32 gooCost                  = 14;
    CardViewInfo card_view_info = 16;
    repeated CardAbility abilities  = 18;
}

message CardViewInfo {
    Vector3Float position   = 1;
    Vector3Float scale      = 2;
}

message Vector3Float {
    float x = 1;
    float y = 2;
    float z = 3;
}

message Vector2Int {
    int32 x = 1;
    int32 y = 2;
}

message Rect {
    Vector2Int position = 1;
    Vector2Int size = 2;
}

message CardList {
    repeated Card cards = 1;
}

message CardCollection {
    string card_name  = 1;
    int64 amount      = 2;
}

message CardSet {
    CardSetType name = 1;
    repeated Card cards = 2;
}

message CardLibrary {
    repeated CardSet sets = 1;
}

message Hero {
    int64 hero_id = 1;

    string icon = 2;
    string name = 3;
    string short_description = 4;
    string long_description = 5;
    string element = 6;

    int64 experience = 7;
    int64 level = 8;
    repeated Skill skills = 9;

    int32 primary_skill = 10;
    int32 secondary_skill = 11;
}

message ListHeroesRequest {
    string user_id = 1;
}

message ListHeroesResponse {
    repeated Hero heroes  = 1;
}

message AddHeroExperienceRequest {
    string user_id = 1;
    int64 hero_id = 2;
    int64 experience = 3;
}

message AddHeroExperienceResponse {
    int64 hero_id = 1;
    int64 experience = 2;
}

message GetHeroRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroResponse {
    Hero hero = 1;
}

message GetHeroSkillsRequest {
    string user_id = 1;
    int64 hero_id = 2;
}

message GetHeroSkillsResponse {
    int64 hero_id = 1;
    repeated Skill skills = 2;
}

message Skill {
    enum SkillTargetType {
         NONE = 0;
         PLAYER = 1;
         PLAYER_CARD = 2;
         PLAYER_ALL_CARDS = 3;
         OPPONENT = 4;
         OPPONENT_CARD = 5;
         OPPONENT_ALL_CARDS = 6;
         ALL_CARDS = 7;
    }

    string title = 1;
    string skill = 2;
    string icon_path = 3;
    string description = 4;
    string skill_targets = 5;
    string element_targets = 6;
    int32 value = 7;

    int32 cooldown = 8;
    int32 initial_cooldown = 9;

    int32 attack = 10;
    int32 defense = 11;
}

message HeroList {
    repeated Hero heroes = 1;
}

message CardCollectionList {
    repeated CardCollection cards = 1;
}

message DeckList {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 2;
}

// Request and Response

message InitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
    string version                             = 5;
    Address oracle                             = 6;
}

message UpdateOracle {
    Address new_oracle = 1;
    Address old_oracle = 2;
}

message UpdateInitRequest {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
    string version                             = 5;
    Address oracle                             = 6;
    string oldVersion                          = 7;
}

message GetInitRequest {
    string version = 1;
}

message GetInitResponse {
    repeated Deck default_decks                = 1;
    repeated CardCollection default_collection = 2;
    repeated Card cards                        = 3;
    repeated Hero heroes                       = 4;
    repeated Hero default_heroes               = 5;
    string version                             = 6;
    Address oracle                             = 7;
}

message UpdateCardListRequest {
    repeated Card cards = 1;
    string version = 2;
}

message GetCardListRequest {
    string version = 1;
}

message GetCardListResponse {
    repeated Card cards = 1;
}

message UpsertAccountRequest {
    string user_id             = 1;
    bool phone_number_verified = 2;
    bool reward_redeemed       = 3;
    bool is_kickstarter        = 4;
    string image               = 5;
    bool email_notification    = 6;
    int64 elo_score            = 7;
    int32 current_tier         = 8;
    int32 game_membership_tier = 9;
    string version = 10;
}

message GetAccountRequest {
    string user_id = 1;
}

message GetDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
}

message GetDeckResponse {
    Deck deck = 2;
}

message CreateDeckRequest {
    string user_id = 1;
    Deck deck = 2;
    int64 last_modification_timestamp = 3;
    string version = 4;
}

message CreateDeckResponse {
    int64 deck_id = 1;
}

message DeleteDeckRequest {
    string user_id = 1;
    int64 deck_id = 2;
    int64 last_modification_timestamp = 3;
}

message EditDeckRequest {
    string user_id = 1;
    Deck deck      = 2;
    int64 last_modification_timestamp = 3;
    string version = 4;
}

message DecksResponse {
    string user_id = 1;
    repeated Deck decks = 2;
}

message ListDecksRequest {
    string user_id = 1;
}

message ListDecksResponse {
    repeated Deck decks = 1;
    int64 last_modification_timestamp = 3;
}

message ListCardLibraryRequest {
    string version = 1;
}

message ListCardLibraryResponse {
    repeated CardSet sets = 1;
}

message ListHeroLibraryRequest {
    string version = 1;
}

message ListHeroLibraryResponse {
    repeated Hero heroes  = 1;
}

message UpdateHeroLibraryRequest {
    string version = 1;
    repeated Hero heroes  = 2;
}

message UpdateHeroLibraryResponse {
}

message GetCollectionRequest {
    string user_id = 1;
}

message GetCollectionResponse {
    repeated CardCollection cards = 1;
}


//////////// Match Making /////////////

message PlayerState {
    string id = 1;
    PlayerActionType currentAction = 2;
    OverlordInstance overlordInstance = 3;
    repeated CardInstance cardsInHand = 4;
    repeated CardInstance cardsInPlay = 5;
    repeated CardInstance cardsInDeck = 6;
    Deck deck  = 7;
    int32 defense   = 8;
    int32 currentGoo = 9;
    int32 gooVials = 10;
    bool hasDrawnCard = 11;
    repeated CardInstance cardsInGraveyard = 12;
    int32 initialCardsInHandCount = 13;
    int32 maxCardsInPlay = 14;
    int32 maxCardsInHand = 15;
    int32 maxGooVials = 16;
    int32 turnTime = 17;
}

message Match {
    int64 id = 1;
    repeated string topics = 2;
    repeated PlayerState playerStates = 3;
    enum Status {
        Created      = 0;
        Matching     = 1;
        Started      = 2;
        Playing      = 3;
        PlayerLeft   = 4;
        Ended        = 5;
        Timedout     = 6;
        Canceled     = 7;
    }
    Status status = 4;
    string version = 5;
    int64 randomSeed = 6;
}

message MatchMakingInfoList {
    repeated MatchMakingInfo infos = 1;
}

message MatchMakingInfo {
    string userId = 1;
    Deck deck = 2;
}

enum PlayerActionType {
    PlayerActionType_None        = 0 [(gogoproto.enumvalue_customname) = "NONE"];
    EndTurn           = 1;
    Mulligan          = 2;
    DrawCard          = 3;
    CardPlay          = 4;
    CardAttack        = 5;
    CardAbilityUsed   = 6;
    OverlordSkillUsed = 7;
    CoinToss          = 8;
    InitHands         = 9;
    LeaveMatch        = 10;
    RankBuff          = 11;
}

message PlayerAction {
    PlayerActionType actionType = 1; // not sure we really need this
    string playerId = 2;
    oneof action {
        PlayerActionCardAttack cardAttack               = 3;
        PlayerActionDrawCard drawCard                   = 4;
        PlayerActionEndTurn endTurn                     = 5;
        PlayerActionMulligan mulligan                   = 6;
        PlayerActionCardPlay cardPlay                   = 7;
        PlayerActionCardAbilityUsed cardAbilityUsed     = 8;
        PlayerActionOverlordSkillUsed overlordSkillUsed = 9;
        PlayerActionLeaveMatch leaveMatch               = 12;
        PlayerActionRankBuff rankBuff                   = 13;
    };
    int64 createdAt = 15; // timestamp
}

message PlayerActionEvent {
    PlayerActionType playerActionType = 1;
    string userId  = 2;
    string message = 3;
    Match match    = 4;
    PlayerAction playerAction = 5;
    History block = 6;
}

message PlayerProfile {
    string userId = 1;
    int64 deckId  = 2;
    string version = 3;
    Address customGame = 5;
    int64 updatedAt = 6;
}

message PlayerPool {
    repeated PlayerProfile playerProfiles = 1;
}

message MatchCount {
    int64 currentId = 1;
}

message FindMatchRequest {
    string userId = 1;
    int64 deckId  = 2;
    string version = 3;
    int64 randomSeed = 4;
    Address customGame = 5;
}

message FindMatchResponse {
    Match match = 1;
}

message CancelFindMatchRequest {
    string userId = 1;
    int64 matchId = 2;
}

message CancelFindMatchResponse {
}

message GetMatchRequest {
    int64 matchId = 1;
}

message GetMatchResponse {
    Match match         = 1;
    GameState gameState = 2;
}

message SetMatchRequest {
    Match match         = 1;
}


message GetGameStateRequest {
    int64 matchId = 1;
}

message GetGameStateResponse {
    GameState gameState = 1;
}

message SetGameStateRequest {
    GameState gameState = 1;
}

message PlayerActionRequest {
    int64 matchId = 1;
    PlayerAction playerAction = 2;
}

message PlayerActionResponse {
    GameState gameState = 1;
    Match match = 2;
}

message BundlePlayerActionRequest {
    int64 matchId = 1;
    repeated PlayerAction playerActions = 2;
}

message BundlePlayerActionResponse {
    GameState gameState = 1;
    Match match = 2;
    repeated HistoryData history = 3;
}

message EndMatchRequest {
    int64 matchId   = 1;
    string userId   = 2;
    string winnerId = 3;
}

message EndMatchResponse {
    GameState gameState = 1;
}

message CheckGameStatusRequest {
    int64 matchId = 1;
}

message CheckGameStatusResponse {
}

// Game Modes

message GameMode {
    string ID = 1;
    string name = 2;
    string description = 3;
    string version = 4;
    GameModeType game_mode_type = 5;
    Address address = 6;
    Address Owner = 7;
}

message GameModeList {
    repeated GameMode game_modes = 1;
}

enum GameModeType {
    Community = 0;
    Loom = 1;
}

message GameModeRequest {
    string name = 1;
    string description = 2;
    string version = 3;
    string address = 4;
    GameModeType game_mode_type = 5;
    string oracle = 6;
}

message UpdateGameModeRequest {
    string ID = 1;
    string name = 2;
    string description = 3;
    string version = 4;
    string address = 5;
    GameModeType game_mode_type = 6;
    string oracle = 7;
}

message DeleteGameModeRequest {
    string ID = 1;
    string oracle = 2;
}

message GetGameModeRequest {
    string ID = 1;
}

message ListGameModesRequest {
}

message GetCustomGameModeCustomUiRequest {
     Address address = 1;
}

message GetCustomGameModeCustomUiResponse {
    repeated CustomGameModeCustomUiElement uiElements = 1;
}

message CallCustomGameModeFunctionRequest {
    Address address = 1;
    bytes callData = 2;
}

message StaticCallCustomGameModeFunctionResponse {
    bytes output = 1;
}

message CustomGameModeCustomUiLabel {
    string text = 1;
}

message CustomGameModeCustomUiButton {
    string title = 1;
    bytes callData = 2;
}

message CustomGameModeCustomUiElement {
    Rect rect = 1;
    oneof uiElement {
        CustomGameModeCustomUiLabel label = 2;
        CustomGameModeCustomUiButton button = 3;
    }
}

//////////////// GAME PLAY //////////////////

// C# interfaces converted

enum AllowedTarget {
    AllowedTarget_NONE = 0 [(gogoproto.enumvalue_customname) = "NONE"];
    PLAYER = 1;
    PLAYER_CARD = 2;
    PLAYER_ALL_CARDS = 3;
    OPPONENT = 4;
    OPPONENT_CARD = 5;
    OPPONENT_ALL_CARDS = 6;
    ALL_CARDS = 7;
    ALL = 8;
}

enum AttackRestriction {
    AttackRestriction_None = 0[(gogoproto.enumvalue_customname) = "None"];
    OnlyNotAttackedByThisUnitInThisTurn = 1;
}

enum CardAbilityBuffType
{
    CardAbilityBuffType_NONE = 0[(gogoproto.enumvalue_customname) = "None"];
    CardAbilityBuffType_GUARD = 1;
    DEFENCE = 2;
    HEAVY = 3;
    CardAbilityBuffType_WEAPON = 4;
    RUSH = 5;
    CardAbilityBuffType_ATTACK = 6;
    FREEZE = 7;
    DAMAGE = 8;
    HEAL_ALLY = 9;
    DESTROY = 10;
    REANIMATE = 11;
}

enum CardAbilityActivityType {
    CardAbilityActivityType_UNDEFINED = 0 [(gogoproto.enumvalue_customname) = "UNDEFINED"];
    PASSIVE = 1;
    ACTIVE = 2;
}

enum CardAbilityTrigger {
    CardAbilityTriggerUndefined = 0;
    TURN = 1;
    ENTRY = 2;
    END = 3;
    ATTACK = 4;
    DEATH = 5;
    PERMANENT = 6;
    GOT_DAMAGE = 7;
    AT_DEFENCE = 8;
    IN_HAND = 9;
}

enum CardAbilityEffect {
    CardAbilityEffect_NONE = 0 [(gogoproto.enumvalue_customname) = "NONE"];
    MASSIVE_WATER_WAVE = 1;
    MASSIVE_FIRE = 2;
    MASSIVE_LIGHTNING = 3;
    MASSIVE_TOXIC_ALL = 4;
    TARGET_ROCK = 5;
    TARGET_FIRE = 6;
    TARGET_LIFE = 7;
    TARGET_TOXIC = 8;
    TARGET_WATER = 9;
    TARGET_ADJUSTMENTS_BOMB = 10;
    STUN_FREEZES = 11;
    STUN_OR_DAMAGE_FREEZES = 12;
    TARGET_ADJUSTMENTS_AIR = 13;
    HEAL_DIRECTLY = 14;
    HEAL = 15;
}

enum CardAbilityType {
    CardAbilityTypeUndefined = 0;
    HEAL_CardAbilityType = 1;
    MODIFICATOR_STATS = 2;
    CHANGE_STAT = 3;
    STUN = 4;
    STUN_OR_DAMAGE_ADJUSTMENTS = 5;
    SPURT = 6;
    ADD_GOO_VIAL = 7;
    ADD_GOO_CARRIER = 8;
    DOT = 9;
    SUMMON = 10;
    SPELL_ATTACK = 11;
    MASSIVE_DAMAGE = 12;
    DAMAGE_TARGET_ADJUSTMENTS = 13;
    DAMAGE_TARGET = 14;
    CARD_RETURN = 15;
    WEAPON = 16;
    CHANGE_STAT_OF_CREATURES_BY_TYPE = 17;
    ATTACK_NUMBER_OF_TIMES_PER_TURN = 18;
    DRAW_CARD = 19;
    DEVOUR_ZOMBIES_AND_COMBINE_STATS = 20;
    DESTROY_UNIT_BY_TYPE = 21;
    LOWER_COST_OF_CARD_IN_HAND = 22;
    OVERFLOW_GOO = 23;
    LOSE_GOO = 24;
    DISABLE_NEXT_TURN_GOO = 25;
    RAGE = 26;
    FREEZE_UNITS = 27;
    TAKE_DAMAGE_RANDOM_ENEMY = 28;
    TAKE_CONTROL_ENEMY_UNIT = 29;
    GUARD = 30;
    DESTROY_FROZEN_UNIT = 31;
    USE_ALL_GOO_TO_INCREASE_STATS = 32;
    FIRST_UNIT_IN_PLAY = 33;
    ALLY_UNITS_OF_TYPE_IN_PLAY_GET_STATS = 34;
    DAMAGE_ENEMY_UNITS_AND_FREEZE_THEM = 35;
    RETURN_UNITS_ON_BOARD_TO_OWNERS_DECKS = 36;
    TAKE_UNIT_TYPE_TO_ADJACENT_ALLY_UNITS = 37;
    ENEMY_THAT_ATTACKS_BECOME_FROZEN = 38;
    TAKE_UNIT_TYPE_TO_ALLY_UNIT = 39;
    REVIVE_DIED_UNITS_OF_TYPE_FROM_MATCH = 40;
    CHANGE_STAT_UNTILL_END_OF_TURN = 41;
    ATTACK_OVERLORD = 42;
    ADJACENT_UNITS_GET_HEAVY = 43;
    FREEZE_NUMBER_OF_RANDOM_ALLY = 44;
    ADD_CARD_BY_NAME_TO_HAND = 45;
    DEAL_DAMAGE_TO_THIS_AND_ADJACENT_UNITS = 46;
    SWING = 47;
    TAKE_DEFENSE_IF_OVERLORD_HAS_LESS_DEFENSE_THAN = 48;
    GAIN_NUMBER_OF_LIFE_FOR_EACH_DAMAGE_THIS_DEALS = 49;
    ADDITIONAL_DAMAGE_TO_HEAVY_IN_ATTACK = 50;
    UNIT_WEAPON = 51;
    TAKE_DAMAGE_AT_END_OF_TURN_TO_THIS = 52;
    DELAYED_LOSE_HEAVY_GAIN_ATTACK = 53;
    DELAYED_GAIN_ATTACK = 54;
    REANIMATE_UNIT = 55;
    PRIORITY_ATTACK = 56;
    DESTROY_TARGET_UNIT_AFTER_ATTACK = 57;
    COSTS_LESS_IF_CARD_TYPE_IN_HAND = 58;
    RETURN_UNITS_ON_BOARD_TO_OWNERS_HANDS = 59;
    REPLACE_UNITS_WITH_TYPE_ON_STRONGER_ONES = 60;
    RESTORE_DEF_RANDOMLY_SPLIT = 61;
    ADJACENT_UNITS_GET_GUARD = 62;
}

enum CardKind {
    SPELL    = 0;
    CREATURE = 1;
}

enum AffectObjectType {
    AffectObjectType_PLAYER = 0 [(gogoproto.enumvalue_customname) = "PLAYER"];
    CHARACTER = 1;
    CARD      = 2;
}

enum CreatureRank {
    option (gogoproto.goproto_enum_stringer) = false;

    Minion = 0;
    Officer = 1;
    Commander = 2;
    General = 3;
}

enum CreatureType {
    CreatureType_None = 0 [(gogoproto.enumvalue_customname) = "None"];
    Walker = 1;
    Feral = 2;
    Heavy = 3;
}

enum CardSetType {
    CardSetType_None = 0 [(gogoproto.enumvalue_customname) = "None"];
    Fire = 1;
    Water = 2;
    Earth = 3;
    Air = 4;
    Life = 5;
    Toxic = 6;
    Item = 7;
    Others = 8;
}

message GameState {
    int64 id                            = 1;
    bool isEnded                        = 2;
    int32 currentPlayerIndex            = 3;
    repeated PlayerState playerStates   = 4;
    int64 currentActionIndex            = 5;
    repeated PlayerAction playerActions = 6;
    int64 randomseed                    = 7;
    string winner                       = 8;
    string version                      = 9;
    int64 createdAt                     = 10;
}

message CardAbility {
    CardAbilityBuffType buffType = 1;
    CardAbilityType type = 2;
    CardAbilityActivityType activityType = 3;
    CardAbilityTrigger trigger = 4 [json_name="call_type"];
    repeated AllowedTarget allowedTargetTypes = 5 [json_name="target_type"];
    StatType stat = 6;
    CardSetType set = 7;
    CardAbilityEffect effect = 8;
    AttackRestriction attackRestriction = 9 [json_name="attack_info"];
    CardKind targetCardType = 10;
    UnitSpecialStatus targetUnitStatusType = 11;
    CardKind targetUnitType = 12;
    int32 value = 13;
    int32 attack = 14;
    int32 defense = 15;
    string name = 16;
    int32 turns = 17;
    int32 count = 18;
    int32 delay = 19;
    repeated VisualEffectInfo VisualEffectsToPlay = 20;

    message VisualEffectInfo {
        enum VisualEffectType {
            Undefined = 0;
            Impact = 1;
            Moving = 2;
        }

        VisualEffectType Type = 1;
        string Path = 2;
    }
}

message CardInstance {
    Card prototype = 1;
    int32 instanceId = 2;
    Card instance = 3;
    string owner = 4;
}

message DataIdOwner {
    int32 dataId = 1;
}

// (interface IDeck)
message CardDeck {
    repeated Card cards = 1;
}

message InstanceIdOwner {
    int32 instanceId = 1;
}

message OverlordInstance {
    int32 instanceId = 1;
    OverlordPrototype prototype = 2;
    OverlordSkillInstance firstSkill = 3;
    OverlordSkillInstance secondSkill = 4;
    int32 defense = 5;
    int32 goo = 6;
    int32 maxGoo = 7;
}

message OverlordPrototype {
    int32 heroId = 1;
    string icon = 2;
    string name = 3;
    string shortDescription = 4;
    string longDescription = 5;
    int32 experience = 6;
    int32 level = 7;
    CardSetType element = 8;
    repeated OverlordSkillPrototype skills = 9;
}

message OverlordSkillInstance {
    OverlordSkillPrototype prototype = 1;
    int32 cooldown = 2;
}

message OverlordSkillPrototype {
    string title = 1;
    string skill = 2;
    string iconPath = 3;
    string description = 4;
    int32 cooldown = 5;
    int32 initialCooldown = 6;
    int32 parameter = 7;
    int32 attack = 8;
    OverlordSkillKind overlordSkillKind = 9;
    repeated AllowedTarget skillTargetTypes = 10;
    repeated CardSetType elementTargetTypes = 11;
}

message PlayerActionLeaveMatch {
}

message PlayerActionCardPlay {
    CardInstance card = 1;
    int32 position = 2;
}

message PlayerActionRankBuff {
    CardInstance card = 1;
    repeated Unit targets = 2;
}

message PlayerActionCardAttack {
    CardInstance attacker = 1;
    AffectObjectType affectObjectType = 2;
    Unit target = 3;
}

message PlayerActionCardAbilityUsed {
    CardInstance card = 1;
    CardKind cardKind = 2;
    repeated Unit targets = 3;
    string AbilityType = 4;
}

message PlayerActionOverlordSkillUsed {
    int64 SkillId = 1;
    AffectObjectType affectObjectType = 2;
    Unit target = 3;
}

message PlayerActionDrawCard {
    CardInstance cardInstance = 2;
}

message PlayerActionEndTurn  {
}

message PlayerActionMulligan {
    repeated CardInstance mulliganedCards = 1;
}

message PlayerActionOutcome {
    string playerId = 1;
    GameState gameState = 2;
}

message StartGameAction {
    repeated PlayerState playerStates = 1;
}

message Unit {
    int32 instanceId = 1;
    AffectObjectType affectObjectType = 2;
    Parameter Parameter = 3;
}

message Parameter {
    int32 Attack  = 1;
    int32 Defense = 2;
    string CardName = 3;
}

enum OverlordSkillKind {
    OverlordSkillKind_None = 0 [(gogoproto.enumvalue_customname) = "NONE"];

    // AIR
    Push = 1;
    Draw = 2;
    WindShield = 3;
    WindWall = 4;
    Retreat = 5;

    // EARTH
    Harden = 6;
    StoneSkin = 7;
    Fortify = 8;
    Phalanx = 9;
    Fortress = 10;

    // FIRE
    FireBolt = 11;
    Rabies = 12;
    Fireball = 13;
    MassRabies = 14;
    MeteorShower = 15;

    // LIFE
    HealingTouch = 16;
    Mend = 17;
    Ressurect = 18;
    Enhance = 19;
    Reanimate = 20;

    // TOXIC
    PoisonDart = 21;
    ToxicPower = 22;
    Breakout = 23;
    Infect = 24;
    Epidemic = 25;

    // WATER
    Freeze = 26;
    IceBolt = 27;
    IceWall = 28;
    Shatter = 29;
    Blizzard = 30;
}

enum OverlordSkillSelectionType {
    Primary = 0;
    Secondary = 1;
}

enum StatType {
    StatType_Undefined = 0 [(gogoproto.enumvalue_customname) = "Undefined"];
    Defenese = 1;
    Damage = 2;
}

enum UnitSpecialStatus {
    UnitSpecialStatus_None = 0;
    Frozen = 1;
}

// Replay

message GameReplay {
    repeated PlayerAction actions = 5;
    repeated HistoryData blocks   = 6;
}

message Player {
    string id = 1;
    Deck deck = 2; // TODO Change to card instance
}

message Zone {
    enum type {
        PLAY = 0;
        DECK = 1;
        HAND = 2;
        GRAVEYARD = 3;
        REMOVEFROMGAME = 4;
        SETASIDE = 5;
        SECRET = 6;
    }
}

message History {
    repeated HistoryData list = 1;
}

message HistoryData {
    oneof data {
        HistoryCreateGame createGame = 1;
        HistoryFullInstance fullInstance = 2;
        HistoryInstance showInstance = 3;
        HistoryHide hideInstance = 4;
        HistoryInstance changeInstance = 5;
        HistoryEndGame endGame = 6;
    }
}

message HistoryCreateGame {
    int64 gameId = 1;
    repeated Player players = 2;
    int64 randomseed = 3;
    string version = 4;
}

message HistoryFullInstance {
    int32 instanceId = 1;
    int32 attack = 2;
    int32 defense = 3;
}

message HistoryInstance {
    int32 instanceId = 1;
    int32 value = 2;
    enum change {
        Attack = 0;
        Defense = 1;
    }
}

message HistoryHide {
    int32 instanceId = 1;
    Zone zone = 2;
}

message HistoryEndGame {
    int64 matchId   = 1;
    string userId   = 2;
    string winnerId = 3;
}
